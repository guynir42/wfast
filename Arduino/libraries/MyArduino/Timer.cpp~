#include "Timer.h"

bool Timer::debug_bit=1;

Timer::Timer(){
  
  initialize();
  
}

Timer::~Timer(){
  
}

void Timer::initialize(){
  
  _current_mode=0; // default behavior
  _interval=5;
  _pulse_length=1;
  
  for(int i=0;i<Parser::MAXN;i++) _out_buf[i]=0;
  
  _first_pulse=0;
  
  resetTime();
  
}

char *Timer::printout(){
  
  char interval[Parser::STRN];
  Parser::ftoa(interval, getInterval(), 2);
  char pulse[Parser::STRN];
  Parser::ftoa(pulse, getPulseLength(), 2);
  snprintf(_out_buf, Parser::MAXN, "%s | int= %s | pul: %s", getModeString(), interval, pulse);
  
  return _out_buf;
  
}

// getters
float Timer::getRunningTime() const {
 
  return ((float) (millis()-_start_time_milli))/1000.0; // convert to seconds!
  
}

int Timer::getState(){
  
  switch(_current_mode){
   
    case COUNT:
      
      if(_interval<=getRunningTime()) return 1;
      else return 0;
         
    case EXPIRE:
      
      if(_interval>=getRunningTime()) return 1;
      else return 0;
      
    case ALTER:
      
      if(((int)(getRunningTime()/_interval))%2==0) return _first_pulse;
      if(getRunningTime()>=_interval*2){ resetTime(); return _first_pulse; }
      else return !_first_pulse;
      
    case PULSED:
      
      if(_first_pulse==0){
	if(getRunningTime()>=_interval && getRunningTime()<=_interval+_pulse_length) return 1;
	else if(getRunningTime()>_interval+_pulse_length){ resetTime(); return 0; }
	else return 0;
      }
      else{
	if(getRunningTime()>=0 && getRunningTime()<=_pulse_length) return 1;
	else if(getRunningTime()>_pulse_length+_interval){ resetTime(); return 0; }
	else return 0;
      }
	
    case SINGLE:
      
      if(getRunningTime()>=_interval && getRunningTime()<=_interval+_pulse_length) return 1;
      else if(getRunningTime()>_interval+_pulse_length){ return 0; }
      else return 0;
      
    case OFF:
      return 0;
      
    case ON:
      return 1;
      
    default:
      
      return 0;
            
  }
  
}

float Timer::getInterval() const {
  
  return _interval;
  
}

float Timer::getPulseLength() const { 
  
  return _pulse_length;
  
}

int Timer::getMode() const {
  
  return _current_mode;
  
}

char *Timer::getModeString() const {
  
  switch(_current_mode){
    
    case COUNT:
      return "COUNT";
    case EXPIRE:
      return "EXPIRE";
    case ALTER:
      return "ALTER";
    case PULSED:
      return "PULSED";
    case SINGLE:
      return "SINGLE";
    case OFF:
      return "OFF";
    case ON:
      return "ON";
    default:
      return "";
    
  }
  
}

char *Timer::getOutBuffer(){
  
  return _out_buf;
  
}

bool Timer::getFirstPulse() const {
 
  return _first_pulse;
  
}

// setters
void Timer::resetTime(){
  
  //Serial.println("reset time");
  
  _start_time_milli=millis();
  
}

void Timer::setMode(int mode){
 
  resetTime();
  _current_mode=mode;
  
}

void Timer::setInterval(float interval_s){
 
  _interval=interval_s;
  
}

void Timer::setPulseLength(float pulse_s){
 
  _pulse_length=pulse_s;
  
}

void Timer::setupCountdown(float interval_s){
  
  if(interval_s<=0) interval_s=_interval;
  
  resetTime();
  setInterval(interval_s);
  setMode(COUNT);
  
}

void Timer::setupExpiration(float interval_s){
    
  if(interval_s<=0) interval_s=_interval;
  
  resetTime();
  setInterval(interval_s);
  setMode(EXPIRE);
}

void Timer::setupAlternator(float interval_s){
  
  if(interval_s<=0) interval_s=_interval;
  
  resetTime();
  setInterval(interval_s);
  setMode(ALTER);
  
}

void Timer::setupPulsed(float interval_s, float pulse_s){
  
  if(interval_s<=0) interval_s=_interval;
  if(pulse_s<=0) interval_s=_interval;
  
  resetTime();
  setInterval(interval_s);
  setPulseLength(pulse_s);
  setMode(PULSED);
  
}

void Timer::setupSingle(float interval_s, float pulse_s){
     
  if(interval_s<=0) interval_s=_interval;
  if(pulse_s<=0) interval_s=_interval;
  
  resetTime();
  setInterval(interval_s);
  setPulseLength(pulse_s);
  setMode(SINGLE);
  
}

void Timer::setFirstPulse(bool first){
  
  _first_pulse=first;
  
}

void Timer::setRunningTime(float time_s){
 
  float time_ms = time_s*1000;
  
  _start_time_milli = millis()-time_ms;
  
}

void Timer::beginInterval(){
 
  switch(_current_mode){
  
    case COUNT: setRunningTime(getInterval()); break;
    
    case ALTER: setRunningTime(_first_pulse*_interval);
      
    case PULSED: 
      if(_first_pulse) setRunningTime(getPulseLength());
      else resetTime();
      break;
    
    resetTime(); break;
    
    default: resetTime(); break;
    
  }
  
}

void Timer::parse(char *arg){
     
  char str1[Parser::STRN];
  char str2[Parser::MAXN];
  
  Parser::splitStr(arg, str1, str2);
  Parser::lowerString(str1);
  Parser::cleanString(str1);
  
  if(debug_bit){ Serial.print("Timer::parse "); Serial.print(str1); Serial.print(" | "); Serial.println(str2); }  

  if(Parser::partialMatch(str1, "countdown")){ 
    
    setMode(COUNT); 
    parseTiming(str2);
    char buf[12];
    Parser::ftoa(buf, getInterval(), 2);
    snprintf(_out_buf, Parser::MAXN, "timer COUNT: %s s", buf); 
    
  }
  else if(Parser::partialMatch(str1, "expire")){ 
    
    setMode(EXPIRE); 
    parseTiming(str2);
    char buf[12];
    Parser::ftoa(buf, getInterval(), 2);
    snprintf(_out_buf, Parser::MAXN, "timer EXPIRE: %s s", buf); 
    
  }
  else if(Parser::partialMatch(str1, "alternate")){ 
    
    setMode(ALTER);
    parseTiming(str2);
    char buf[12];
    Parser::ftoa(buf, getInterval(), 2);
    snprintf(_out_buf, Parser::MAXN, "timer ALTER: %s s", buf); 
    
  }
  else if(Parser::partialMatch(str1, "pulsed")){ 
    
    setMode(PULSED); 
    parseTiming(str2);
    char buf[12];
    Parser::ftoa(buf, getInterval(), 2);
    char buf2[12];
    Parser::ftoa(buf2, getPulseLength(), 2);
    snprintf(_out_buf, Parser::MAXN, "timer PULSED: %s/%s s", buf, buf2); 
    
  }
  
  else if(Parser::partialMatch(str1, "single")){ 
    
    setMode(SINGLE); 
    parseTiming(str2);
    char buf[12];
    Parser::ftoa(buf, getInterval(), 2);
    char buf2[12];
    Parser::ftoa(buf2, getPulseLength(), 2);
    snprintf(_out_buf, Parser::MAXN, "timer SINGLE: %s/%s s", buf, buf2); 
    
  }
  
  else if(Parser::partialMatch(str1, "off")){ 
    
    setMode(ON); 
    snprintf(_out_buf, Parser::MAXN, "timer is OFF"); 
    
  }
  
  else if(Parser::partialMatch(str1, "on")){ 
    
    setMode(ON); 
    snprintf(_out_buf, Parser::MAXN, "timer ON"); 
    
  }
  
  else{
    snprintf(_out_buf, Parser::STRN, "bad command: %s", str1);
  }
  
  Parser::println(_out_buf);
  
}

void Timer::parseTiming(char *arg){
         
  char str1[Parser::STRN];
  char str2[Parser::MAXN];
  
  Parser::splitStr(arg, str1, str2);
  Parser::cleanString(str1);
  Parser::cleanString(str2);
  
  if(strlen(str1)>0 && atof(str1)>0){ 
    
    setInterval(atof(str1));
    
    if(strlen(str2)>0 && atof(str2)>0){
     
      setPulseLength(atof(str2));
      
    }
    
  }
  
}